import Image from 'next/image'
import { Inter } from 'next/font/google'
import Head from 'next/head';
import { getAllPosts, getAllTags, getNumberOfPages, getPostsByPage, getPostsForTopPage } from "../../../lib/notionAPI";
import { SinglePost } from "../../../components/Post/SinglePost";
import Link from 'next/link';
import Pagination from '@/components/Pagination/Pagination';
import Tag from '@/components/Tag/Tag';

const inter = Inter({ subsets: ['latin'] })

type Post = {
  id: string;
  title: string;
  description: string;
  date: string;
  slug: string;
  tags: string[];
}

type BlogPageListProps = {
  numberOfPage: number;
  postsByPage: Post[];
  allTags: string[];
}

export const getStaticPaths = async () => {  
  const numberOfPage = await getNumberOfPages();

  let params = [];
  for (let i = 0; i <= numberOfPage; i++) {
    params.push({ params: { page: i.toString() } });
  }

  return {
    // paths: [{ params: { page: '1' } }, { params: { page: '2' } }],
    paths: params,
    fallback: "blocking", // can also be true or 'blocking'
  };
};

// SSG (Static Site Generation)
export const getStaticProps = async (context: { params: { page: string; }; }) => {
  const numberOfPage = await getNumberOfPages();
  const currentPage = context.params?.page; // オプショナルチェイン
  const postsByPage = await getPostsByPage(
    parseInt(currentPage.toString(), 10) // Intに変換
  );

  const allTags = await getAllTags();

  return {
    props: {
      numberOfPage,
      postsByPage,
      allTags,
    },
    revalidate: 60, // ISR (Incremental Static Regeneration)
  };
};

const BlogPageList = ({ numberOfPage, postsByPage, allTags, }: BlogPageListProps) => { // Propsから分割代入
  return (
    <div className="container w-full h-full mx-auto">
      <Head>
        <title>Notion-Blog</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className="container w-full mt-16">
        <h1 className="text-5xl lg:text-8xl font-medium text-center mb-16">All Articles</h1>
        <div>
          <section className='lg:grid grid-cols-2 w-5/6 gap-3 mx-auto'>
            {postsByPage.map((post) => (
              <div key={post.id} className="mx-4">
                <SinglePost
                  title={post.title}
                  description={post.description}
                  date={post.date}
                  tags={post.tags}
                  slug={post.slug}
                  isPaginationPage={true}
                />
              </div>
            ))}
          </section>
          <Pagination numberOfPage={numberOfPage} tag=''/>
          <Tag tags={allTags}/>
        </div>
      </main>
    </div>
  );
}

export default BlogPageList;